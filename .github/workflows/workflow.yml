#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  depoly:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: 1. 레포 가져오기
#        uses: actions/checkout@v4
#
#      - name: 2. jdk 설치
#        uses: actions/setup-java@v4
#        with:
#          distribution: temurin
#          java-version: 17
#
#      - name: 3. application.yml 파일 작성
#        run: echo "${{secrets.APPLICATION}}" > ./src/main/resources/application.yml
#
#      - name: 3.5. gradlew 권한 부여
#        run: chmod +x ./gradlew
#
#      - name: 4. build
#        run: ./gradlew clean build
#
#      - name: 5. ecr credentials 설정
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: ap-northeast-2
#          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
#          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
#
#      - name: 6. ecr 로그인
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: 7. docker 이미지 생성
#        run: docker build -t docker-depoly-server .
#
#      - name: 8. docker 이미지에 tag 작성
#        run: docker tag docker-depoly-server ${{steps.login-ecr.outputs.registry}}/docker-depoly-server:latest
#
#      - name: 9. ecr에 docker 이미지 push.
#        run: docker push ${{steps.login-ecr.outputs.registry}}/docker-depoly-server:latest
#
#      - name: 10. ssh에 원격 접속.
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{secrets.EC2_HOST}}
#          username: ${{secrets.EC2_USERNAME}}
#          key: ${{secrets.EC2_PRIVATE_KEY}}
#          script_stop: true
#          script: |
#            docker stop docker-depoly-server || true
#            docker rm docker-depoly-server || true
#            docker pull ${{steps.login-ecr.outputs.registry}}/docker-depoly-server:latest
#            docker run -d --name docker-depoly-server -p 8080:8080 ${{steps.login-ecr.outputs.registry}}/docker-depoly-server:latest



name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION }}
        with:
          host: ${{ secrets.EC2_HOST }} # EC2의 주소
          username: ${{ secrets.EC2_USERNAME }} # EC2 접속 username
          key: ${{ secrets.EC2_PRIVATE_KEY }} # EC2의 Key 파일의 내부 텍스트
          envs: APPLICATION_PROPERTIES
          script_stop: true # 아래 script 중 실패하는 명령이 하나라도 있으면 실패로 처리
          script: |
            cd /home/ubuntu/instagram-server # 여기 경로는 자신의 EC2에 맞는 경로로 재작성하기
            rm -rf src/main/resources/application.yml
            git pull origin main
            echo "$APPLICATION_PROPERTIES" > src/main/resources/application.yml
            ./gradlew clean build
            sudo fuser -k -n tcp 8080 || true # || true를 붙인 이유는 8080에 종료시킬 프로세스가 없더라도 실패로 처리하지 않기 위해서이다. 
            nohup java -jar build/libs/*SNAPSHOT.jar > ./output.log 2>&1 &